generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  providerAccount  ProviderAccount?
  posts            Post[]
  meetings         Meeting[]
  opinions         Opinion[]
  messagesSent     Message[]        @relation("SentMessages")
  messagesReceived Message[]        @relation("ReceivedMessages")
  shares           Share[]          @relation("UserShares")
  comments         Comment[]
  feelings         Feeling[]
  sharedBy         Share[]          @relation("SharedByUser")
  notifications    Notification[]
  followers        Followers[]      @relation("Followers")
  following        Following[]      @relation("Following")
}

model ProviderAccount {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @unique @db.ObjectId
  authorities Authority[]
  meetings    Meeting[]
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @db.ObjectId
  type     String
  content  String
  comments Comment[]
  feelings Feeling[]
  shares   Share[]
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
  content String
}

model Feeling {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
  feeling String
}

model Share {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  user      User   @relation("UserShares", fields: [userId], references: [id])
  userId    String @db.ObjectId
  post      Post   @relation(fields: [postId], references: [id])
  postId    String @db.ObjectId
  shareType String
  sharedBy  User   @relation("SharedByUser", fields: [userId], references: [id])
}

model Authority {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  providerAccount   ProviderAccount @relation(fields: [providerAccountId], references: [id])
  providerAccountId String          @db.ObjectId
  content           String
}

model Meeting {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  user              User            @relation(fields: [userId], references: [id])
  userId            String          @db.ObjectId
  providerAccount   ProviderAccount @relation(fields: [providerAccountId], references: [id])
  providerAccountId String          @db.ObjectId
  date              DateTime
  documents         Document[]
  totalPrice        Int
}

model Document {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String  @db.ObjectId
  content   String
}

model Opinion {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  content String
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String   @db.ObjectId
  content    String
  createdAt  DateTime @default(now())
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
}

model Followers {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation("Followers", fields: [userId], references: [id])
  userId     String   @db.ObjectId
  followerId String
  createdAt  DateTime @default(now())
}

model Following {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation("Following", fields: [userId], references: [id])
  userId     String   @db.ObjectId
  followerId String
  createdAt  DateTime @default(now())
}
